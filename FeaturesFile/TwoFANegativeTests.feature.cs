// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BDD_TwoFA.FeaturesFile
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TwoFANegativeTests")]
    public partial class TwoFANegativeTestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TwoFANegativeTests.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TwoFANegativeTests", "\tAs a developer \r\n\tI want to test the 2FA application  with invalid data\r\n\tSo tha" +
                    "t I can verify the output", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Email API Authentications with unknown username in realm")]
        [NUnit.Framework.CategoryAttribute("NegativeTest_TwoFAAPIInValidUser")]
        [NUnit.Framework.TestCaseAttribute("swapnatootikoora", null)]
        public virtual void VerifyEmailAPIAuthenticationsWithUnknownUsernameInRealm(string user, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "NegativeTest_TwoFAAPIInValidUser"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Email API Authentications with unknown username in realm", null, @__tags);
#line 8
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
 testRunner.Given("User has valid token for valid credentials", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.When(string.Format("User makes request with valid token and invalid user as \"{0}\"", user), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("User should get error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the TwoFA Application with invalid username")]
        [NUnit.Framework.CategoryAttribute("NegativeTest_TwoFAUI_InValidCredentials")]
        [NUnit.Framework.TestCaseAttribute("test", null)]
        public virtual void VerifyTheTwoFAApplicationWithInvalidUsername(string invaliduser, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "NegativeTest_TwoFAUI_InValidCredentials"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the TwoFA Application with invalid username", null, @__tags);
#line 17
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 18
 testRunner.Given("Launch TwoFA Application and verify homescreen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
 testRunner.Then("Verify Login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 20
 testRunner.Then(string.Format("Login with \"{0}\"", invaliduser), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 21
 testRunner.Then("Click on Login", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 22
 testRunner.And("Verify the notification error in the login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the TwoFA Application with invalid pwd")]
        [NUnit.Framework.CategoryAttribute("NegativeTest_TwoFAUI_InValidCredentials")]
        [NUnit.Framework.TestCaseAttribute("TwoFATest2", "xyz", null)]
        public virtual void VerifyTheTwoFAApplicationWithInvalidPwd(string validuser, string wrongPsw, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "NegativeTest_TwoFAUI_InValidCredentials"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the TwoFA Application with invalid pwd", null, @__tags);
#line 29
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 30
 testRunner.Given("Launch TwoFA Application and verify homescreen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
 testRunner.Then("Verify Login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 32
 testRunner.Then(string.Format("Enter Wrong password for \"{0}\" user as \"{1}\"", validuser, wrongPsw), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 33
 testRunner.Then("Click on Login", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 34
 testRunner.And("Verify the notification error in the login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the TwoFA Application with invalid OTP")]
        [NUnit.Framework.CategoryAttribute("NegativeTest_TwoFAUI_InValidOTP")]
        [NUnit.Framework.TestCaseAttribute("2FATest1", null)]
        public virtual void VerifyTheTwoFAApplicationWithInvalidOTP(string user, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "NegativeTest_TwoFAUI_InValidOTP"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the TwoFA Application with invalid OTP", null, @__tags);
#line 40
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 41
 testRunner.Given("Launch TwoFA Application and verify homescreen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
 testRunner.Then("Verify Login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 43
 testRunner.Then(string.Format("Login with \"{0}\"", user), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 44
 testRunner.Then("Click on Login", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 45
 testRunner.Then("Verify Token Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 46
 testRunner.Then("Enter wrong OTP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 47
 testRunner.Then("Click on Submit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 48
 testRunner.And("Verify the token notification error in the login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify TwoFA authentication pages with invalid option values")]
        [NUnit.Framework.CategoryAttribute("NegativeTest_TwoFAUI_InValidAuthOptions")]
        [NUnit.Framework.TestCaseAttribute("2FATest6", "SMS", "07508155256", null)]
        [NUnit.Framework.TestCaseAttribute("2FATest6", "SMS", "xyzhejt", null)]
        [NUnit.Framework.TestCaseAttribute("2FATest6", "SMS", "9767854345325654", null)]
        [NUnit.Framework.TestCaseAttribute("2FATest6", "email", "swapna.tootikooranetcompany.com", null)]
        [NUnit.Framework.TestCaseAttribute("2FATest6", "email", "swapna.tootikoora@netcompanycom", null)]
        [NUnit.Framework.TestCaseAttribute("2FATest6", "email", "123432", null)]
        public virtual void VerifyTwoFAAuthenticationPagesWithInvalidOptionValues(string user, string option, string optionValue, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "NegativeTest_TwoFAUI_InValidAuthOptions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify TwoFA authentication pages with invalid option values", null, @__tags);
#line 56
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 57
 testRunner.Given("Launch TwoFA Application and verify homescreen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 58
 testRunner.Then("Verify Login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 59
 testRunner.Then(string.Format("Login with \"{0}\"", user), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 60
 testRunner.Then("Click on Login", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 61
 testRunner.Then("Verify Two Factor Authentication screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 62
 testRunner.Then(string.Format("Select the TwoFA Authentication Option \"{0}\" and enter \"{1}\" if required", option, optionValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 63
 testRunner.Then("Click Submit on Enrollment Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 64
 testRunner.Then(string.Format("Verify the notification error in the enrollment Page for \"{0}\"", option), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
